/*******************************************************************************
*   Ark Wallet
*   (c) 2017 Ledger
*   (c) ARK Ecosystem
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
********************************************************************************/

#ifndef ARK_TRANSACTION_TYPE_7_H
#define ARK_TRANSACTION_TYPE_7_H

////////////////////////////////////////////////////////////////////////////////

typedef struct delegate_resignation_asset_t {} DelegateResignationAsset;

////////////////////////////////////////////////////////////////////////////////

#endif


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

const char * const ui_menu_delegate_resignation[][2] = {
    { "Operation",  (const char *const)amountBuffer },
    { "PublicKey",  (const char *const)screenBuffer },
    { "Fees",       (const char *const)amountBuffer },
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

static ParserStatus internalDeserializeAsset(Transaction *transaction,
                                             const uint8_t *buffer,
                                             const uint32_t length) {
/////////
    case TRANSACTION_TYPE_DELEGATE_RESIGNATION:
        // No Payload
        return USTREAM_FINISHED;
        break;
/////////
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void displayTransaction(uint8_t step, bagl_element_t *element) {
/////////
    // Delegate Resignation: Type 7
    else if (transaction.type == TRANSACTION_TYPE_DELEGATE_RESIGNATION) {
        displayDelegateResignation(&transaction, step);
        element->text =
        ui_menu_delegate_resignation[step][(element->component.userid) >> 4U];
    }
/////////
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void setDisplaySteps(const Transaction *transaction) {
/////////
    // Delegate Resignation: Type 7
    else if (transaction->type == TRANSACTION_TYPE_DELEGATE_RESIGNATION) {
        operation_set_steps(6U);
    }
/////////
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void displayDelegateResignation(const Transaction *transaction, uint8_t step);

void displayDelegateResignation(const Transaction *transaction, uint8_t step) {
    switch(step) {
        // Operation type
        case 0:
            os_memmove((void *)amountBuffer, "Delegate Resignation\0", 21U);
            break;

        // Delegate PublicKey
        case 1:
            bytesToHex((char *)screenBuffer,
                        transaction->senderPublicKey,
                        PUBLICKEY_COMPRESSED_LENGTH);
            break;

        // Fees
        case 2:
            printAmount(transaction->fee,
                        (uint8_t *)amountBuffer, sizeof(amountBuffer),
                        TOKEN_NAME, TOKEN_NAME_LENGTH,
                        TOKEN_DECIMALS);
            break;

        default: break;
    }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
